import { useState, useEffect } from 'react';
import { Container, Paper, Typography, Box, Stack, CircularProgress, Divider } from "@mui/material";

import { AvailableOnOpenSea } from '../components';
import pageService, { PageData } from '../services/page-service';

export default function FourCorners() {
  const [data, setData] = useState<PageData | null>(null);

  useEffect(() => {
    pageService.getPageData('4corners').then(page => setData(page));
  }, []);

  if (!data) {
    return (
      <Box sx={{ marginTop: '50px', display: 'flex', justifyContent: 'center' }}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Container maxWidth="md" sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
      <Typography variant="h2" align="center" sx={{ margin: '50px 0 20px 0', fontWeight: 'bold' }}>
        {data.title}
      </Typography>
      <Paper elevation={3} sx={{ padding: '5px', width: '75%', backgroundColor: 'black' }}>
        <img src={`${process.env.PUBLIC_URL}/${data.image}`} alt={data.image} style={{ width: '100%', height: 'auto' }}/>
      </Paper>
      <Paper elevation={3} sx={{ margin: '10px', padding: '10px' }}>
        <Typography align="justify" sx={{ margin: '10px 0', fontStyle: 'italic' }}>
          {data.summary}
        </Typography>
      </Paper>

      <Container maxWidth='sm' sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
        <Typography align='justify' width='100%' sx={{ marginTop: '40px' }}>
          <b>Four Corners Vintage</b> started with the concept of combining gradients, by those means
          we developed the first two building blocks <b>Pixel Paint</b> and <b>Color Interpolation.</b>
        </Typography>
        {renderLayer('gradient', { marginTop: '30px', marginBottom: '10px' })}
        {renderSubtitle('Gradient generated by "Pixel Paint" and "Color Interpolation" building blocks')}
        
        <Typography align='justify' width='100%'>
          The first idea was creating individual randomized gradient colors, rotating and combining them using transparent layers.
        </Typography>
        <Stack direction='row' spacing={2} sx={{ marginTop: '20px', marginBottom: '10px' }}>
          {[0,1,2,3].map((id) => {
            return renderLayer(`problem_p${id}`, { key: id });
          })}
        </Stack>
        {renderSubtitle('Individual gradient layers rotated by "Rotation" building block')}

        <Typography align='justify' width='100%'>
          This is where the first problem arised, the layers order mattered and the last one was proeminent in image because it 
          overlaps 2 corners:
        </Typography>
        {renderLayer('overlap', { marginTop: '30px', marginBottom: '10px' })}
        {renderSubtitle('Resulting image, note the predominance of the last purple gradient')}
        
        <Typography align='justify' width='100%'>
          At this point we decided to try another approach though it looked nice but not enough, at least we knew that we were in the right direction.
          One considered option was implementing another core block called <b>Blend Modes</b>, but at the end we kept it for future releases and 
          choose an approach that didn't have overlapping, this is where the four corners concept was born.
        </Typography>
        
        <Typography align='justify' width='100%'>
          We still generate four gradients with randomize colors but starting from a single corner, rotate each one by a
          multiple of 90 degrees, resulting in four different images with a gradient on each corner:
        </Typography>

        <Stack direction='row' spacing={2} sx={{ marginTop: '20px', marginBottom: '10px' }}>
          {[0,1,2,3].map((id) => {
            return renderLayer(`4c_p${id}`, { key: id });
          })}
        </Stack>
        {renderSubtitle('Individual corner gradient layers rotated by "Rotation" building block')}
        
        <Typography align='justify' width='100%'>
          As minting lots of NFTs is not a simple task, we started simple by manually minting a small
          amount of them. As we created few artwork, we needed something to make them special, this is where the golden border and
          vintage concept arise.
        </Typography>
        {renderLayer('4c_p4', { marginTop: '30px', marginBottom: '10px' })}
        {renderSubtitle('Golden border')}

        <Typography align='justify' width='100%'>
          Wrapping everything up, when we combine all of them with a black background, they'd look like the following image:
        </Typography>
        {renderLayer('4c_example', { marginTop: '30px', marginBottom: '10px' })}
        {renderSubtitle('Resulting image using "Layers" building block')}
      </Container>

      <Divider sx={{ width: '100%', margin: '40px 0 40px 0' }}/>
      <Box sx={{ alignSelf: 'flex-start'}}>
        <Typography align='justify' width='100%' sx={{ marginBottom: '10px' }}>
          Thanks for coming with us through our entire collection<br/> concept process and stay tuned for our next release.
        </Typography>
        <AvailableOnOpenSea target={data.openSeaTarget} />
        <Typography align='justify' width='100%' sx={{ marginTop: '10px' }}>
          OutOfMemory NFT team.
        </Typography>
      </Box>
      <Box sx={{ width: '100%', height: '100px' }} />

      <Box sx={{ alignSelf: 'flex-start'}}>
        <Typography sx={{ margin: '20px 0 20px 0' }}>
          View launch event on:
        </Typography>
        <Stack direction='row' spacing={2} sx={{ marginTop: '20px', marginBottom: '10px' }}>
          <a href='https://nftcalendar.io/event/four-corners-vintage-by-outofmemorynft/' title="View on NFTCalendar" rel='noreferrer' target='_blank'>
            <Box
              component='img'
              src={`${process.env.PUBLIC_URL}/static/marketing/nft-calendar.png`}
              sx={{ width: '150px' }}
            />
          </a>
        </Stack>
      </Box>

      <Box sx={{ width: '100%', height: '50px' }} />
    </Container>
  );
}

function renderSubtitle(text: string) {
  return <Typography typography='subtitle1' align='center' sx={{ color: 'text.secondary', marginBottom: '30px' }}>{text}</Typography>
}

function renderLayer(name: string, extraProps: Object) {
  return <Box
    component='img'
    src={`${process.env.PUBLIC_URL}/static/collections/four-corners/${name}.png`}
    sx={{ width: '150px' }}
    {...extraProps}
  />
}